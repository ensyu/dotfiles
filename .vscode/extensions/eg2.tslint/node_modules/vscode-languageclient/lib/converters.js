/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
'use strict';
var vs = require('vscode');
var protocol_1 = require('./protocol');
var is = require('./utils/is');
function asOpenTextDocumentParams(textDocument) {
    return {
        uri: textDocument.uri.toString(),
        text: textDocument.getText()
    };
}
exports.asOpenTextDocumentParams = asOpenTextDocumentParams;
function isTextDocumentChangeEvent(value) {
    var candidate = value;
    return is.defined(candidate.document) && is.defined(candidate.contentChanges);
}
function isTextDocument(value) {
    var candidate = value;
    return is.defined(candidate.uri) && is.defined(candidate.version);
}
function asChangeTextDocumentParams(arg) {
    if (isTextDocument(arg)) {
        return { uri: arg.uri.toString(), text: arg.getText() };
    }
    else if (isTextDocumentChangeEvent(arg)) {
        var result = [];
        var uri = arg.document.uri.toString();
        return arg.contentChanges.map(function (change) {
            var range = change.range;
            return {
                uri: uri,
                range: {
                    start: { line: range.start.line, character: range.start.character },
                    end: { line: range.end.line, character: range.end.line }
                },
                rangeLength: change.rangeLength,
                text: change.text
            };
        });
    }
    else {
        throw Error('Unsupported text document change parameter');
    }
}
exports.asChangeTextDocumentParams = asChangeTextDocumentParams;
function asCloseTextDocumentParams(textDocument) {
    return {
        uri: textDocument.uri.toString()
    };
}
exports.asCloseTextDocumentParams = asCloseTextDocumentParams;
function asTextDocumentPosition(textDocument, position) {
    return { uri: textDocument.uri.toString(), position: asWorkerPosition(position) };
}
exports.asTextDocumentPosition = asTextDocumentPosition;
function asWorkerPosition(position) {
    return { line: position.line, character: position.character };
}
exports.asWorkerPosition = asWorkerPosition;
function asDiagnostics(diagnostics) {
    return diagnostics.map(function (diagnostic) { return new vs.Diagnostic(asRange(diagnostic.range), diagnostic.message, asDiagnosticSeverity(diagnostic.severity)); });
}
exports.asDiagnostics = asDiagnostics;
function asRange(value) {
    if (is.undefined(value)) {
        return undefined;
    }
    else if (is.nil(value)) {
        return null;
    }
    return new vs.Range(asPosition(value.start), asPosition(value.end));
}
exports.asRange = asRange;
function asPosition(value) {
    if (is.undefined(value)) {
        return undefined;
    }
    else if (is.nil(value)) {
        return null;
    }
    return new vs.Position(value.line, value.character);
}
exports.asPosition = asPosition;
function asDiagnosticSeverity(value) {
    switch (value) {
        case protocol_1.DiagnosticSeverity.Error:
            return vs.DiagnosticSeverity.Error;
        case protocol_1.DiagnosticSeverity.Warning:
            return vs.DiagnosticSeverity.Warning;
        case protocol_1.DiagnosticSeverity.Information:
            return vs.DiagnosticSeverity.Information;
        case protocol_1.DiagnosticSeverity.Hint:
            return vs.DiagnosticSeverity.Hint;
    }
}
exports.asDiagnosticSeverity = asDiagnosticSeverity;
function asHover(hover) {
    return new vs.Hover(hover.contents, is.defined(hover.range) ? asRange(hover.range) : undefined);
}
exports.asHover = asHover;
function asCompletionItems(items) {
    return items.map(asCompletionItem);
}
exports.asCompletionItems = asCompletionItems;
function set(value, func) {
    if (is.defined(value)) {
        func();
    }
}
function asCompletionItem(item) {
    var result = new vs.CompletionItem(item.label);
    set(item.detail, function () { return result.detail = item.detail; });
    set(item.documentation, function () { return result.documentation = item.documentation; });
    set(item.filterText, function () { return result.filterText = item.filterText; });
    set(item.insertText, function () { return result.insertText = item.insertText; });
    set(item.kind, function () { return result.kind = item.kind; });
    set(item.sortText, function () { return result.sortText = item.sortText; });
    set(item.textEdit, function () { return result.textEdit = asTextEdit(item.textEdit); });
    return result;
}
exports.asCompletionItem = asCompletionItem;
function asTextEdit(edit) {
    return new vs.TextEdit(asRange(edit.range), edit.newText);
}
exports.asTextEdit = asTextEdit;
function asSignatureHelp(item) {
    var result = new vs.SignatureHelp();
    set(item.activeParameter, function () { return result.activeParameter = item.activeParameter; });
    set(item.activeSignature, function () { return result.activeSignature = item.activeSignature; });
    set(item.signatures, function () { return result.signatures = asSignatureInformations(item.signatures); });
    return result;
}
exports.asSignatureHelp = asSignatureHelp;
function asSignatureInformations(items) {
    return items.map(asSignatureInformation);
}
exports.asSignatureInformations = asSignatureInformations;
function asSignatureInformation(item) {
    var result = new vs.SignatureInformation(item.label);
    set(item.documentation, function () { return result.documentation = item.documentation; });
    set(item.parameters, function () { return result.parameters = asParameterInformations(item.parameters); });
    return result;
}
exports.asSignatureInformation = asSignatureInformation;
function asParameterInformations(item) {
    return item.map(asParameterInformation);
}
exports.asParameterInformations = asParameterInformations;
function asParameterInformation(item) {
    var result = new vs.ParameterInformation(item.label);
    set(item.documentation, function () { return result.documentation = item.documentation; });
    return result;
}
exports.asParameterInformation = asParameterInformation;
