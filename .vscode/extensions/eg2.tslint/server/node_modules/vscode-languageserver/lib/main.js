/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
'use strict';
var vscode_jsonrpc_1 = require('vscode-jsonrpc');
exports.ResponseError = vscode_jsonrpc_1.ResponseError;
exports.ErrorCodes = vscode_jsonrpc_1.ErrorCodes;
var protocol_1 = require('./protocol');
exports.FileChangeType = protocol_1.FileChangeType;
exports.DiagnosticSeverity = protocol_1.DiagnosticSeverity;
exports.TextDocumentSyncKind = protocol_1.TextDocumentSyncKind;
exports.CompletionItemKind = protocol_1.CompletionItemKind;
exports.CompletionItem = protocol_1.CompletionItem;
exports.TextEdit = protocol_1.TextEdit;
exports.SignatureInformation = protocol_1.SignatureInformation;
exports.ParameterInformation = protocol_1.ParameterInformation;
var events_1 = require('./utils/events');
var is = require('./utils/is');
// ------------- Reexport the API surface of the language worker API ----------------------
var fm = require('./files');
var Files;
(function (Files) {
    Files.uriToFilePath = fm.uriToFilePath;
    Files.resolveModule = fm.resolveModule;
})(Files = exports.Files || (exports.Files = {}));
var TextDocument = (function () {
    function TextDocument(uri, content) {
        this._uri = uri;
        this._content = content;
    }
    Object.defineProperty(TextDocument.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: true,
        configurable: true
    });
    TextDocument.prototype.getText = function () {
        return this._content;
    };
    TextDocument.prototype.update = function (event) {
        this._content = event.text;
    };
    return TextDocument;
})();
var TextDocumentChangeEvent = (function () {
    function TextDocumentChangeEvent() {
    }
    return TextDocumentChangeEvent;
})();
exports.TextDocumentChangeEvent = TextDocumentChangeEvent;
var TextDocuments = (function () {
    function TextDocuments() {
        this._documents = Object.create(null);
        this._onDidChangeContent = new events_1.Emitter();
    }
    Object.defineProperty(TextDocuments.prototype, "syncKind", {
        get: function () {
            return protocol_1.TextDocumentSyncKind.Full;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextDocuments.prototype, "onDidChangeContent", {
        get: function () {
            return this._onDidChangeContent.event;
        },
        enumerable: true,
        configurable: true
    });
    TextDocuments.prototype.get = function (uri) {
        return this._documents[uri];
    };
    TextDocuments.prototype.all = function () {
        var _this = this;
        return Object.keys(this._documents).map(function (key) { return _this._documents[key]; });
    };
    TextDocuments.prototype.keys = function () {
        return Object.keys(this._documents);
    };
    TextDocuments.prototype.listen = function (connection) {
        var _this = this;
        connection.__textDocumentSync = protocol_1.TextDocumentSyncKind.Full;
        connection.onDidOpenTextDocument(function (event) {
            var document = new TextDocument(event.uri, event.text);
            _this._documents[event.uri] = document;
            _this._onDidChangeContent.fire({ document: document });
        });
        connection.onDidChangeTextDocument(function (event) {
            var last = null;
            if (is.array(event)) {
                if (event.length > 0) {
                    last = event[event.length - 1];
                }
            }
            else {
                last = event;
            }
            if (last) {
                var document_1 = _this._documents[last.uri];
                document_1.update(last);
                _this._onDidChangeContent.fire({ document: document_1 });
            }
        });
        connection.onDidCloseTextDocument(function (event) {
            delete _this._documents[event.uri];
        });
    };
    return TextDocuments;
})();
exports.TextDocuments = TextDocuments;
// ------------------------- implementation of the language server protocol ---------------------------------------------
var ErrorMessageTracker = (function () {
    function ErrorMessageTracker() {
        this.messages = Object.create(null);
    }
    ErrorMessageTracker.prototype.add = function (message) {
        var count = this.messages[message];
        if (!count) {
            count = 0;
        }
        count++;
        this.messages[message] = count;
    };
    ErrorMessageTracker.prototype.sendErrors = function (connection) {
        Object.keys(this.messages).forEach(function (message) {
            connection.window.showErrorMessage(message);
        });
    };
    return ErrorMessageTracker;
})();
exports.ErrorMessageTracker = ErrorMessageTracker;
var Logger = (function () {
    function Logger() {
    }
    Logger.prototype.attach = function (connection) {
        this.connection = connection;
    };
    Logger.prototype.error = function (message) {
        this.send(protocol_1.MessageType.Error, message);
    };
    Logger.prototype.warn = function (message) {
        this.send(protocol_1.MessageType.Warning, message);
    };
    Logger.prototype.info = function (message) {
        this.send(protocol_1.MessageType.Info, message);
    };
    Logger.prototype.log = function (message) {
        this.send(protocol_1.MessageType.Log, message);
    };
    Logger.prototype.send = function (type, message) {
        if (this.connection) {
            this.connection.sendNotification(protocol_1.LogMessageNotification.type, { type: type, message: message });
        }
    };
    return Logger;
})();
var RemoteWindowImpl = (function () {
    function RemoteWindowImpl(connection) {
        this.connection = connection;
    }
    RemoteWindowImpl.prototype.showErrorMessage = function (message) {
        this.connection.sendNotification(protocol_1.ShowMessageNotification.type, { type: protocol_1.MessageType.Error, message: message });
    };
    RemoteWindowImpl.prototype.showWarningMessage = function (message) {
        this.connection.sendNotification(protocol_1.ShowMessageNotification.type, { type: protocol_1.MessageType.Warning, message: message });
    };
    RemoteWindowImpl.prototype.showInformationMessage = function (message) {
        this.connection.sendNotification(protocol_1.ShowMessageNotification.type, { type: protocol_1.MessageType.Info, message: message });
    };
    return RemoteWindowImpl;
})();
function createConnection(inputStream, outputStream) {
    var shutdownReceived;
    inputStream.on('end', function () {
        process.exit(shutdownReceived ? 0 : 1);
    });
    inputStream.on('close', function () {
        process.exit(shutdownReceived ? 0 : 1);
    });
    var logger = new Logger();
    var connection = vscode_jsonrpc_1.createServerMessageConnection(inputStream, outputStream, logger);
    logger.attach(connection);
    var remoteWindow = new RemoteWindowImpl(connection);
    function asThenable(value) {
        if (is.thenable(value)) {
            return value;
        }
        else {
            return Promise.resolve(value);
        }
    }
    var shutdownHandler = null;
    var initializeHandler = null;
    var exitHandler = null;
    var protocolConnection = {
        listen: function () { return connection.listen(); },
        onRequest: function (type, handler) { return connection.onRequest(type, handler); },
        sendNotification: function (type, params) { return connection.sendNotification(type, params); },
        onNotification: function (type, handler) { return connection.onNotification(type, handler); },
        onInitialize: function (handler) { return initializeHandler = handler; },
        onShutdown: function (handler) { return shutdownHandler = handler; },
        onExit: function (handler) { return exitHandler = handler; },
        get console() { return logger; },
        get window() { return remoteWindow; },
        onDidChangeConfiguration: function (handler) { return connection.onNotification(protocol_1.DidChangeConfigurationNotification.type, handler); },
        onDidChangeWatchedFiles: function (handler) { return connection.onNotification(protocol_1.DidChangeWatchedFilesNotification.type, handler); },
        __textDocumentSync: undefined,
        onDidOpenTextDocument: function (handler) { return connection.onNotification(protocol_1.DidOpenTextDocumentNotification.type, handler); },
        onDidChangeTextDocument: function (handler) { return connection.onNotification(protocol_1.DidChangeTextDocumentNotification.type, handler); },
        onDidCloseTextDocument: function (handler) { return connection.onNotification(protocol_1.DidCloseTextDocumentNotification.type, handler); },
        sendDiagnostics: function (params) { return connection.sendNotification(protocol_1.PublishDiagnosticsNotification.type, params); },
        onHover: function (handler) { return connection.onRequest(protocol_1.HoverRequest.type, handler); },
        onCompletion: function (handler) { return connection.onRequest(protocol_1.CompletionRequest.type, handler); },
        onCompletionResolve: function (handler) { return connection.onRequest(protocol_1.CompletionResolveRequest.type, handler); },
        onSignatureHelp: function (handler) { return connection.onRequest(protocol_1.SignatureHelpRequest.type, handler); },
        dispose: function () { return connection.dispose(); }
    };
    connection.onRequest(protocol_1.InitializeRequest.type, function (params) {
        if (initializeHandler) {
            var result = initializeHandler(params);
            return asThenable(result).then(function (value) {
                if (value instanceof vscode_jsonrpc_1.ResponseError) {
                    return value;
                }
                var result = value;
                if (!result) {
                    result = { capabilities: {} };
                }
                var capabilities = result.capabilities;
                if (!capabilities) {
                    capabilities = {};
                    result.capabilities = {};
                }
                if (!is.number(capabilities.textDocumentSync)) {
                    capabilities.textDocumentSync = is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : protocol_1.TextDocumentSyncKind.None;
                }
                return result;
            });
        }
        else {
            var result = { capabilities: { textDocumentSync: protocol_1.TextDocumentSyncKind.None } };
            return result;
        }
    });
    connection.onRequest(protocol_1.ShutdownRequest.type, function (params) {
        shutdownReceived = true;
        if (shutdownHandler) {
            return shutdownHandler(params);
        }
        else {
            return undefined;
        }
    });
    connection.onNotification(protocol_1.ExitNotification.type, function (params) {
        try {
            if (exitHandler) {
                exitHandler(params);
            }
        }
        finally {
            if (shutdownReceived) {
                process.exit(0);
            }
            else {
                process.exit(1);
            }
        }
    });
    return protocolConnection;
}
exports.createConnection = createConnection;
